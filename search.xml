<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++Primer 阅读笔记-第四章</title>
      <link href="/post/2dd9c219.html"/>
      <url>/post/2dd9c219.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-Primer-阅读笔记"><a href="#C-Primer-阅读笔记" class="headerlink" title="C++Primer 阅读笔记"></a>C++Primer 阅读笔记</h1><h2 id="第四章-表达式"><a href="#第四章-表达式" class="headerlink" title="第四章  表达式"></a>第四章  表达式</h2><h3 id="4-5-递增和递减运算符"><a href="#4-5-递增和递减运算符" class="headerlink" title="4.5 递增和递减运算符"></a>4.5 递增和递减运算符</h3><ol><li><p>自增和自减运算符必须作用于左值运算对象，前置版本将对象本身作为<strong>左值</strong>返回，后置版本则将对象原始值的副本作为<strong>右值</strong>返回。</p></li><li><p>除非必须，否则不用递增递减运算符的后置版本（将原始值存储下来返回，是一种浪费）（for循环：i++-&gt;++i)</p></li><li><p>运算对象可以按任意顺序求值：a=a++  语句未定义，编译器可能会自行处理</p></li><li><p>解引用运算符的优先级低于点运算符：*p. size()  语句错误 ，p为指针，并没有size成员</p><h3 id="4-7条件运算符"><a href="#4-7条件运算符" class="headerlink" title="4.7条件运算符"></a>4.7条件运算符</h3></li><li><p>形式：cond ? expr1:expr2   expr1与expr2是两个类型相同或可能转换为某个公共类型的表达式</p></li><li><p>当条件运算符的<strong>两个表达式都是左值或者能转换成同一种左值类型时</strong>，运算的结果是左值，否则运算的结果是右值</p></li><li><p>允许在条件运算符的内部嵌套另一个条件运算符，如：（根据成绩分档，high pass\pass\fail</p></li><li><pre><code>finalgrade =(grade&gt;90)?&quot;high pass&quot; :(grade&lt;60)?&quot;fail&quot;:&quot;pass&quot;;</code></pre></li></ol><h3 id="4-8位运算符"><a href="#4-8位运算符" class="headerlink" title="4.8位运算符"></a>4.8位运算符</h3><ol><li>关于符号位如何处理没有明确的规定，所以建议仅将位运算符用于处理无符号类型</li><li>移位运算符中&gt;&gt;/&lt;&lt;右侧的运算对象一定<strong>不能为负</strong>，而且值必须严格小于结果的位数</li><li>如果运算对象是带符号类型，在左侧插入符号位的副本或值为0的二进制位，如何选择视具体环境而定</li><li>char类型占1字节（8位），移位时首先提升成int类型（4字节，32位）</li><li>可以使用位与（&amp;）位或（|）位异或（^)等进行状态只有2的统计，如班级30个学生是否通过考试，unsigned long32位，若通过则与1&lt;&lt;i（学生编号）位与运算</li><li>移位运算符优先级比算术运算符的优先级低，但比关系运算符、赋值运算符、条件运算符的优先级高</li></ol><h3 id="4-9-4-10-sizeof-运算符和逗号运算符"><a href="#4-9-4-10-sizeof-运算符和逗号运算符" class="headerlink" title="4.9+4.10 sizeof  运算符和逗号运算符"></a>4.9+4.10 sizeof  运算符和逗号运算符</h3><ol><li>对数组执行sizeof运算符得到整个数组所占空间的大小（并不会当成指针处理），但对string对象或vector对象执行sizeof运算只返回该类型固定部分的大小，不会计算对象的元素占用了多少空间</li><li>逗号运算符真正的结果是<strong>右侧表达式的值</strong>，如果右侧表达式是左值，则最终的求值结果也是左值</li></ol><h3 id="4-11-类型转换"><a href="#4-11-类型转换" class="headerlink" title="4.11 类型转换"></a>4.11 类型转换</h3><ol><li>整型提升：对于bool\char\unsigned char\short\等类型来说，只要它们所有可能的值能存在Int里，它们就会提升成int 类型</li><li>如果一个运算对象是无符号类型，另外一个是带符号类型，而且其中无符号类型不小于带符号类型（所占空间），那么带符号的运算对象转换成无符号的（若负值极有可能引发错误）</li><li>如果带符号类型大于无符号类型，如果无符号类型的所有值都能存在该带符号类型中，则无符号类型的运算对象转换成带符号类型。如果不能，那么带符号类型的运算对象转换成无符号型，例如，如果两个运算对象的类型分别是Long 和unsigned int ，并且int和long的大小相同，则long类型的运算对象转换成unsigned int 类型，若long类型占用的空间比int 多，则unsignde int类型的运算符转换成long 类型</li><li>在绝大多数用到数组的表达式中，数组自动转换成指向数组首元素的指针，而当数组被用作decltype关键字，或作为取地址符（&amp;)、sizeof及typeid等运算符的运算对象时，上述转换不会发生，同样的，如果用一个引用来初始化数组，上述转换也不会发生。</li><li>指向任意非常量的指针能转换成void<em>,指向任意对象的指针能转换成const void\</em></li><li>强制类型转换： cast-name<type>(expression)</li><li>cast-name 是 static_cast、dynamic_cast、const_cast、reinterpret_cast中的一种</li><li>static_cast: 任何具有<strong>明确定义</strong>的类型转换，只要不包含底层const，都可以使用static_cast。</li><li>const_cast 只能改变运算对象的底层const，如果对象本身不是一个常量，使用强制类型转换获得写权限是合法的行为，但如果对象本身是一个常量，再用const_cast执行写操作就会产生未定义的后果（常用于有函数重载的上下文中）</li><li>reinterpret_cast通常位运算对象的位模式提供较低层次上的重新解释（本质上依赖于机器，要想安全使用必须对涉及的类型和编译器实现转换的过程非常了解）</li></ol><p><img src="C:%5CUsers%5Cxuhui%5CDesktop%5C%E6%96%87%E6%A1%88%E7%B4%A0%E6%9D%90%5CTypora%5Cimage-20200331142248724.png" alt="image-20200331142248724"></p><p><img src="C:%5CUsers%5Cxuhui%5CDesktop%5C%E6%96%87%E6%A1%88%E7%B4%A0%E6%9D%90%5CTypora%5Cimage-20200331142403234.png" alt="image-20200331142403234"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ STL之map使用</title>
      <link href="/post/f30e2236.html"/>
      <url>/post/f30e2236.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-STL之map使用"><a href="#C-STL之map使用" class="headerlink" title="C++ STL之map使用"></a>C++ STL之map使用</h1><h2 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h2><p>map是STL的一个关联容器，它提供一对一（其中第一个可以称为关键字，每个关键字只能在map中出现一次，第二个可能称为该关键字的值）的数据处理能力，由于这个特性，它完成有可能在我们处理一对一数据的时候，在编程上提供快速通道。这里说下map内部数据的组织，map内部自建一颗<strong>红黑树</strong>(一种非严格意义上的平衡二叉树)，这颗树具有<strong>对数据自动排序</strong>的功能，所以在map内部所有的数据都是有序的，后边我们会见识到有序的好处。</p><h2 id="头文件和构造函数："><a href="#头文件和构造函数：" class="headerlink" title="头文件和构造函数："></a>头文件和构造函数：</h2><p>#include<map></p><p>使用格式：</p><pre class=" language-C++"><code class="language-C++">map<datatype,datatype> Exm;</code></pre><h2 id="插入："><a href="#插入：" class="headerlink" title="插入："></a>插入：</h2><pre><code>// 定义一个map对象map&lt;int, string&gt; mapStudent; // 第一种 用insert函數插入pairmapStudent.insert(pair&lt;int, string&gt;(000, &quot;student_zero&quot;)); // 第二种 用insert函数插入value_type数据mapStudent.insert(map&lt;int, string&gt;::value_type(001, &quot;student_one&quot;));// 第三种 用&quot;array&quot;方式插入mapStudent[123] = &quot;student_first&quot;;mapStudent[456] = &quot;student_second&quot;;</code></pre><p>当map中有待插入元素的关键字时，insert操作是不能在插入数据的，但是用数组方式就不同了，它可以覆盖以前该关键字对应的值。</p><blockquote><p>pair:  c++中的结构模板，定义在头文件utility中，提供一个包含2个数据成员的结构体模板。继承与_Pair_base结构体模板。通过first，second访问2个成员，有 operator= 和 swap 方法。(将两个数据成员合并为一个)</p><p>value_type类型：指迭代器所指对象的型别。任何一个打算与STL算法有完美搭配的class，都应该定义自己的value_ type内嵌型别。（常用于模板的构建）</p></blockquote><pre><code>// 构造定义，返回一个pair对象pair&lt;iterator,bool&gt; insert (const value_type&amp; val);pair&lt;map&lt;int, string&gt;::iterator, bool&gt; Insert_Pair;Insert_Pair = mapStudent.insert(map&lt;int, string&gt;::value_type (001,&quot;student_one&quot;)); if(!Insert_Pair.second)   cout &lt;&lt; &quot;&quot;Error insert new element&quot; &lt;&lt; endl;</code></pre><p>我们通过pair的第二个变量来知道是否插入成功，它的第一个变量返回的是一个map的迭代器，如果插入成功的话Insert_Pair. second应该是true的，否则为false。</p><h2 id="查找："><a href="#查找：" class="headerlink" title="查找："></a>查找：</h2><p>使用迭代器+find函数，注意查找的是关键字key,若成功则返回迭代器，若失败返回map. end()</p><h2 id="删除与清空："><a href="#删除与清空：" class="headerlink" title="删除与清空："></a>删除与清空：</h2><pre><code>//迭代器刪除iter = mapStudent.find(&quot;123&quot;);mapStudent.erase(iter); //用关键字刪除int n = mapStudent.erase(&quot;123&quot;); //如果刪除了會返回1，否則返回0 //用迭代器范围刪除 : 把整个map清空mapStudent.erase(mapStudent.begin(), mapStudent.end());//等同于mapStudent.clear()</code></pre><p>注意map是有序的</p><h2 id="大小："><a href="#大小：" class="headerlink" title="大小："></a>大小：</h2><p>size函数，不加赘述</p><h2 id="map的基本操作函数"><a href="#map的基本操作函数" class="headerlink" title="map的基本操作函数"></a><strong>map的基本操作函数</strong></h2><p>C++ maps是一种关联式容器，包含“关键字/值”对</p><p> begin()         返回指向map头部的迭代器</p><p> clear(）        删除所有元素</p><p> count()         返回指定元素出现的次数</p><p> empty()         如果map为空则返回true</p><p> end()           返回指向map末尾的迭代器</p><p> equal_range()   返回特殊条目的迭代器对</p><p> erase()         删除一个元素</p><p> find()          查找一个元素</p><p> get_allocator() 返回map的配置器</p><p> insert()        插入元素</p><p> key_comp()      返回比较元素key的函数</p><p> lower_bound()   返回键值&gt;=给定元素的第一个位置</p><p> max_size()      返回可以容纳的最大元素个数</p><p> rbegin()        返回一个指向map尾部的逆向迭代器</p><p> rend()          返回一个指向map头部的逆向迭代器</p><p> size()          返回map中元素的个数</p><p> swap()           交换两个map</p><p> upper_bound()    返回键值&gt;给定元素的第一个位置</p><p> value_comp()     返回比较元素value的函数</p><h2 id="map与unordered-map"><a href="#map与unordered-map" class="headerlink" title="map与unordered_map"></a>map与unordered_map</h2><p>区别在于是否排序，map: 在缺省下，按照递增的排序顺序unordered_map :不排序  </p><p>map :在map内部采用了自平衡的BST（二叉搜索树）的数据结构，实现了数据排序；unordered_map: 内部采用了哈希表的数据结构</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>map： 该类型的搜索时间复杂度为log(n)     unordered_map ： 搜索时间复杂度。O(1)为平均时间，最坏情况下的时间复杂度为O（n）;</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>map : 该操作的时间 复杂度为log(n)+再平衡时间    unordered_map : 该操作的时间复杂度与搜索的时间复杂度一样。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除操作的时间复杂度与插入操作的时间复杂度是一样的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
